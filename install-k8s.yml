---

 - name: "Install K8s cluster"
   hosts: servers
   vars_files:
     vars
   tasks:
   - name: "Checking selinux status"
     shell: getenforce
     register: result
   
   - name: "Stop processing if selinux is enabled"
     fail:
       msg: Please add SELINUX=disabled in /etc/sysconfig/selinux, reboot and re-run the playbook!
     when: result.stdout != "Disabled"
   
   - name: "Enable and start firewalld"
     service:
       name: firewalld
       state: started
       enabled: yes
   
   - name: "Open firewall ports on master node"
     delegate_to: localhost
     firewalld:
       port: "{{ item }}"
       permanent: yes
       state: enabled
       immediate: yes
     loop: "{{ master_ports }}"
   
   - name: "Open firewall ports on worker nodes"
     firewalld:
       port: "{{ item }}"
       permanent: yes
       state: enabled
       immediate: yes
     when: inventory_hostname in groups["workers"]
     loop: "{{ worker_ports }}"
   
   - name: "Load required kernel modules"
     shell: /usr/sbin/modprobe overlay && /usr/sbin/modprobe br_netfilter
   
   - name: "Add required sysctl values"
     command: "{{ item }}"
     loop:
     - echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.d/k8s.conf    
     - echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.d/k8s.conf    
     - echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.d/k8s.conf
     - /usr/sbin/sysctl --system
   
   - name: "Copy repo files to all servers"
     copy:
       src: "{{ item.src }}"
       dest: "{{ item.dest }}"
       owner: root
       group: root
       mode: '0644'
     loop: "{{ repo_files }}"

   - name: "Install packages"
     yum:
       name: "{{ packages }}"
       state: present
       disable_excludes: kubernetes

   - name: "Reload systemd"
     systemd:
       daemon_reload: yes

   - name: "Enable services"
     service:
       name: "{{ item }}"
       enabled: yes
       state: started
     loop: "{{ svc }}"

   - name: "Pull container images and initialize cluster"
     delegate_to: localhost
     shell: /usr/bin/kubeadm config images pull && /usr/bin/kubeadm init

   - name: "Generate joining token"
     delegate_to: localhost
     shell: kubeadm token create --print-join-command
     register: token

   - name: "Join worker nodes to the cluster"
     shell: "{{ token.stdout }}"
     when: inventory_hostname in groups["workers"]


   - name: "Configure pre-reqs for usage and install calico network plugin"
     delegate_to: localhost
     shell: "{{ item }}"
     loop:
     - mkdir -p $HOME/.kube
     - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
     - chown $(id -u):$(id -g) $HOME/.kube/config
     - kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
